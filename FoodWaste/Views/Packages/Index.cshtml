@using FoodWaste.Domain;
@model IEnumerable<Package>

@{
    ViewData["Title"] = "Index";
    IEnumerable<Package> studentPackages = ViewBag.StudentPackages;
    IEnumerable<Package> employeePackages = ViewBag.EmployeePackages;
    IEnumerable<Cafeteria> cafeterias = ViewBag.Cafeterias;
}

<h1>Available Packages</h1>

@if (studentPackages == null)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}
else
{
    <label>Filter on location:</label><br />
    <select id="cafeteriaFilter" onchange="FilterPackages()">
        <option value="All">All Cafeterias</option>
        @foreach (Cafeteria c in cafeterias)
        {
            string selected = c.City == ViewBag.StudentCity ? "selected" : "";
            <option value="@c.Location" selected="@selected">@c.Name</option>
        }
    </select>

    <input type="text" id="mealTypeFilter" placeholder="Filter by Meal Type" oninput="FilterPackages()" />
    <button type="button" onclick="ClearInput()">Clear</button>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickupDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickupExpiry)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContainsAdultProducts)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MealType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cafeteria)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
            <tr data-cafeteria="@item.Cafeteria.Location" data-meal-type="@item.MealType">
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PickupDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PickupExpiry)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ContainsAdultProducts)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MealType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cafeteria.Location)
            </td>
            <td>
                @if (studentPackages != null)
                {
                        <a asp-action="Reserve" asp-route-id="@item.Id">Reserve</a>
                    }
                    else
                    {
                        if(item.Student == null)
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit |</a>
                            <a asp-action="Delete" asp-route-id="@item.Id"> Delete |</a>
                        }
                    <a asp-action = "Details" asp-route-id = "@item.Id"> Details </a> 
                }
            </td>
        </tr>
}
    </tbody>
</table>

@if (studentPackages != null)
{
    <h1>Your packages</h1>
}
else if (employeePackages != null)
{
    <h1>Packages at other cafeterias</h1>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickupDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PickupExpiry)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContainsAdultProducts)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MealType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cafeteria)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in studentPackages ?? employeePackages)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PickupDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PickupExpiry)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContainsAdultProducts)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MealType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cafeteria.Location)
                </td>
                <td>
                    @if (studentPackages != null)
                    {
                        <form method="post" asp-action="Cancel">
                            <input type="hidden" name="id" value="@item.Id" />
                            <button type="submit">Cancel</button>
                        </form>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id"> Details </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script type="text/javascript">
    function ShowHideDiv(select) {
        var selectedCafeteria = select.value;
        var packageRows = document.querySelectorAll("tr[data-cafeteria]");

        for (const row of packageRows) {
            const rowCafeteria = row.getAttribute("data-cafeteria");

            if (selectedCafeteria === "All" || selectedCafeteria === rowCafeteria) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
        FilterPackages();
    }

    function FilterPackages() {
        var selectedCafeteria = document.getElementById("cafeteriaFilter").value;
        var filterText = document.getElementById("mealTypeFilter").value.toLowerCase();

        var packageRows = document.querySelectorAll("tr[data-cafeteria]");

        for (const row of packageRows) {
            const rowCafeteria = row.getAttribute("data-cafeteria");
            const rowMealType = row.getAttribute("data-meal-type").toLowerCase();

            if (
                (selectedCafeteria === "All" || selectedCafeteria === rowCafeteria) &&
                (filterText === "" || rowMealType.includes(filterText))
            ) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    }

    function ClearInput() {
        var inputField = document.getElementById("mealTypeFilter");
        inputField.value = "";
        FilterPackages();
    }


    document.addEventListener("DOMContentLoaded", function () {
        var selectElement = document.getElementById("cafeteriaFilter");
        if (selectElement) {
            selectElement.dispatchEvent(new Event("change"));
        }
    });
</script>